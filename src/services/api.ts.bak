import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Base URL for the API
// API Service base URL
// NOTE: The actual endpoint used is https://foodrush-be.onrender.com/auth/login
// without the /api/v1 prefix for login and some other auth endpoints
const API_URL = 'https://foodrush-be.onrender.com/api/v1';

/**
 * API Integration Notes:
 * 
 * Registration Endpoint: /api/v1/auth/register
 * Required fields: 
 *   - email: User's email address
 *   - password: User's password
 *   - fullName: Full name (not firstName/lastName separately)
 *   - phoneNumber: Phone number (not 'phone')
 *   - role: User role (e.g. 'rider' for delivery drivers)
 * 
 * Login Endpoint: /api/v1/auth/login
 * Required fields:
 *   - email: User's email address
 *   - password: User's password
 * 
 * Successful response: 
 *   - status_code: 201 (registration) or 200 (login)
 *   - userId, name, email, phoneNumber, role returned in data object
 * 
 * IMPORTANT: Email verification is required after registration. Users cannot
 * login until they verify their email address by clicking the link sent to their email.
 * 
 * Common error codes:
 *   - 400: Validation error (missing or invalid fields)
 *   - 401: Unauthorized (for login - often means account not verified or invalid credentials)
 *   - 409: Email or phone number already in use
 *   - 500: Server error
 */

// Create axios instance with default config
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for adding auth token to requests
api.interceptors.request.use(
  async (config) => {
    const token = await AsyncStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for handling common errors
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // Handle 401 errors (unauthorized - token expired)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      // You could implement token refresh here if needed
      
      // For now, we'll just clear the token and force re-login
      await AsyncStorage.removeItem('auth_token');
      // Force logout or redirect to login screen
      // This part will be handled by AuthContext
    }
    
    return Promise.reject(error);
  }
);

// API endpoints for authentication
export const authAPI = {
  // Register a new rider
  register: async (userData: {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    phoneNumber: string;
    role?: string;
    vehicleName?: string;
  }) => {
    try {
      // Using the exact working payload structure confirmed by our tests
      const payload = {
        email: userData.email,
        password: userData.password,
        fullName: `${userData.firstName} ${userData.lastName}`,
        phoneNumber: userData.phoneNumber,
        role: 'rider'
      };
      
      console.log('Registration attempt with payload:', JSON.stringify(payload));
      
      // Use the confirmed working endpoint
      const response = await axios.post(
        `${API_URL}/auth/register`, 
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );
      
      console.log('Registration successful:', JSON.stringify(response.data));
      return response.data;
    } catch (error: any) {
      console.error('Registration failed');
      
      // Specific handling for known error types
      if (error.response?.status === 409) {
        // Email or phone already exists
        const errorData = error.response.data;
        console.error('Conflict error:', JSON.stringify(errorData));
        
        // Throw a more specific error for the component to handle
        const conflictError = new Error(errorData.message || 'Email or phone number already in use');
        conflictError.name = 'ConflictError';
        throw conflictError;
      }
      
      // Log specific information about other errors
      if (error.response) {
        console.error('Status:', error.response.status);
        console.error('Data:', JSON.stringify(error.response.data));
        console.error('Headers:', JSON.stringify(error.response.headers));
      } else if (error.request) {
        console.error('No response received:', error.request);
      } else {
        console.error('Error message:', error.message);
      }
      
      throw error;
    }
  },

  // Login with email and password
  login: async (email: string, password: string) => {
    try {
      // Log the login attempt for debugging
      console.log(`Attempting login with email: ${email}`);
      
      // IMPORTANT: Based on comprehensive testing, the correct endpoint is:
      // https://foodrush-be.onrender.com/auth/login (without /api/v1 prefix)
      const url = 'https://foodrush-be.onrender.com/auth/login';
      console.log('Using login URL:', url);
      
      const response = await axios.post(
        url,
        {
          email,
          password
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );
      
      console.log('Login successful, response:', JSON.stringify(response.data));
      return response.data;
    } catch (error: any) {
      console.error('Login failed');
      
      // Log specific information about the error
      if (error.response) {
        console.error('Status:', error.response.status);
        console.error('Data:', JSON.stringify(error.response.data));
        
        // Handle account verification required
        if (error.response.status === 401) {
          const errorMessage = error.response.data?.message || '';
          
          // Check for different verification-related messages
          if (errorMessage.toLowerCase().includes('verify') || 
              errorMessage.toLowerCase().includes('not active') ||
              errorMessage.toLowerCase().includes('activation')) {
            const verificationError = new Error('Please check your email and verify your account before logging in');
            verificationError.name = 'VerificationError';
            throw verificationError;
          }
          
          // If it's just invalid credentials, provide a clearer error
          if (errorMessage.toLowerCase().includes('invalid credential') ||
              errorMessage.toLowerCase().includes('incorrect password')) {
            const credentialsError = new Error('The email or password you entered is incorrect');
            credentialsError.name = 'InvalidCredentialsError';
            throw credentialsError;
          }
        }
      }
      
      throw error;
    }
  },

  // Forgot password request
  forgotPassword: async (email: string) => {
    const response = await api.post('/auth/forgot-password', { email });
    return response.data;
  },

  // Reset password with token
  resetPassword: async (token: string, newPassword: string) => {
    const response = await api.post('/auth/reset-password', {
      token,
      newPassword,
    });
    return response.data;
  },

  // Get current user profile
  getProfile: async () => {
    const response = await api.get('/auth/me');
    return response.data;
  },

  // Update user profile
  updateProfile: async (userData: any) => {
    const response = await api.put('/auth/update-profile', userData);
    return response.data;
  },

  // Verify email address
  verifyEmail: async (token: string) => {
    const response = await api.post('/auth/verify-email', { token });
    return response.data;
  },

  // Change password when logged in
  changePassword: async (currentPassword: string, newPassword: string) => {
    const response = await api.post('/auth/change-password', {
      currentPassword,
      newPassword,
    });
    return response.data;
  },
};

// API endpoints for rider-specific operations
export const riderAPI = {
  // Get rider's current status
  getStatus: async () => {
    const response = await api.get('/riders/status');
    return response.data;
  },

  // Update rider's status (online/offline)
  updateStatus: async (status: 'online' | 'offline') => {
    const response = await api.put('/riders/status', { status });
    return response.data;
  },

  // Get rider's current deliveries
  getCurrentDeliveries: async () => {
    const response = await api.get('/riders/deliveries/current');
    return response.data;
  },

  // Get rider's delivery history
  getDeliveryHistory: async (page = 1, limit = 10) => {
    const response = await api.get(`/riders/deliveries/history?page=${page}&limit=${limit}`);
    return response.data;
  },

  // Accept a delivery
  acceptDelivery: async (deliveryId: string) => {
    const response = await api.post(`/riders/deliveries/${deliveryId}/accept`);
    return response.data;
  },

  // Start a delivery (picked up from restaurant)
  startDelivery: async (deliveryId: string) => {
    const response = await api.post(`/riders/deliveries/${deliveryId}/start`);
    return response.data;
  },

  // Complete a delivery
  completeDelivery: async (deliveryId: string) => {
    const response = await api.post(`/riders/deliveries/${deliveryId}/complete`);
    return response.data;
  },

  // Get rider's earnings
  getEarnings: async (period: 'day' | 'week' | 'month' | 'all' = 'all') => {
    const response = await api.get(`/riders/earnings?period=${period}`);
    return response.data;
  },

  // Update rider's location
  updateLocation: async (latitude: number, longitude: number) => {
    const response = await api.post('/riders/location', { latitude, longitude });
    return response.data;
  },

  // Update rider's vehicle information
  updateVehicle: async (vehicleData: any) => {
    const response = await api.put('/riders/vehicle', vehicleData);
    return response.data;
  }
};

// Additional helper to test API connection
export const testAPI = {
  // Test registration endpoints
  testRegister: async () => {
    // First, try to get API information
    try {
      console.log('Checking API base URL...');
      const baseResponse = await axios.get(API_URL);
      console.log('Base URL Response:', JSON.stringify(baseResponse.data));
    } catch (error: any) {
      console.log('Base URL check failed:', error.message);
    }
    
    // Also try OPTIONS request to see available methods
    try {
      console.log('Checking API OPTIONS...');
      const optionsResponse = await axios.options(API_URL, {
        headers: { 'Accept': 'application/json' }
      });
      console.log('OPTIONS Response:', JSON.stringify(optionsResponse.data));
      console.log('OPTIONS Headers:', JSON.stringify(optionsResponse.headers));
    } catch (error: any) {
      console.log('OPTIONS check failed:', error.message);
    }

    // Generate unique email and phone for each test to prevent conflicts
    const timestamp = new Date().getTime();
    const uniqueEmail = `test.driver${timestamp}@example.com`;
    const uniquePhone = `123${timestamp.toString().substring(6)}`;

    // Test various formats of the registration payload
    // Based on validation error, API requires fullName and phoneNumber
    const correctPayload = {
      email: uniqueEmail,
      password: "Password123",
      fullName: "Test Driver",
      phoneNumber: uniquePhone,
      role: "rider"
    };

    console.log(`Testing with unique email: ${uniqueEmail} and phone: ${uniquePhone}`);
    console.log('IMPORTANT: The API requires email verification after registration.');
    console.log('In a real environment, users must verify email before logging in.');
    console.log('For testing, use the demo account credentials.');

    // Test with the corrected payload format
    const testCases = [
      // Primary endpoint with corrected payload
      {
        endpoint: '/auth/register',
        payload: {
          ...correctPayload
        }
      },
      // Try different permutations of the endpoints
      {
        endpoint: '/users/register',
        payload: {
          ...correctPayload
        }
      },
      {
        endpoint: '/driver/register',
        payload: {
          ...correctPayload
        }
      },
      {
        endpoint: '/register',
        payload: {
          ...correctPayload
        }
      },
      // Try without the API_URL prefix and directly to base URL
      {
        endpoint: '/auth/register',
        payload: {
          ...correctPayload
        },
        baseUrl: 'https://foodrush-be.onrender.com'
      }
    ];
    
    const results = [];
    
    for (const testCase of testCases) {
      try {
        const url = testCase.baseUrl ? 
          `${testCase.baseUrl}${testCase.endpoint}` : 
          `${API_URL}${testCase.endpoint}`;
          
        console.log(`Testing endpoint: ${url}`);
        
        const response = await axios.post(
          url,
          testCase.payload,
          {
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            }
          }
        );
        results.push({
          endpoint: url,
          payload: testCase.payload,
          success: true,
          data: response.data
        });
      } catch (error: any) {
        results.push({
          endpoint: testCase.baseUrl ? 
            `${testCase.baseUrl}${testCase.endpoint}` : 
            `${API_URL}${testCase.endpoint}`,
          payload: testCase.payload,
          success: false,
          error: error.response?.data || error.message,
          status: error.response?.status
        });
      }
    }
    
    console.log('API Test Results:', JSON.stringify(results, null, 2));
    return results;
  },
  
  // Test login endpoints
  testLogin: async (email: string = 'driver@demo.com', password: string = 'demo123') => {
    console.log(`Testing login with email: ${email}`);
    
    // Try different credential combinations to find one that works
    const credentials = [
      { email: 'driver@demo.com', password: 'demo123' },
      { email: 'driver@demo.com', password: 'password123' },
      { email: 'driver@foodrush.com', password: 'demo123' },
      { email: 'test@example.com', password: 'password123' }
    ];
    
    // Test multiple possible endpoints
    const endpointsToTest = [
      { baseUrl: 'https://foodrush-be.onrender.com', path: '/auth/login' },
      { baseUrl: 'https://foodrush-be.onrender.com', path: '/api/v1/auth/login' },
      { baseUrl: 'https://foodrush-be.onrender.com', path: '/login' },
      { baseUrl: 'https://foodrush-be.onrender.com', path: '/users/login' },
      { baseUrl: 'https://foodrush-be.onrender.com/api/v1', path: '/auth/login' }
    ];
    
    const results = [];
    
    // Test each endpoint with the provided credentials
    for (const endpoint of endpointsToTest) {
      try {
        const url = `${endpoint.baseUrl}${endpoint.path}`;
        console.log(`Testing login endpoint: ${url}`);
        
        const response = await axios.post(
          url,
          { email, password },
          {
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            }
          }
        );
        
        results.push({
          endpoint: url,
          credentials: { email, password },
          success: true,
          data: response.data,
          status: response.status
        });
        
        // If successful, we can stop testing other endpoints
        break;
      } catch (error: any) {
        results.push({
          endpoint: `${endpoint.baseUrl}${endpoint.path}`,
          credentials: { email, password },
          success: false,
          error: error.response?.data || error.message,
          status: error.response?.status
        });
        
        // If we get a 401 error, this might be the correct endpoint with invalid credentials
        // Try other credentials with this endpoint
        if (error.response && error.response.status === 401) {
          console.log('Found endpoint that returns 401 (invalid credentials), trying alternative credentials...');
          
          for (const cred of credentials) {
            // Skip if it's the same as provided credentials
            if (cred.email === email && cred.password === password) continue;
            
            try {
              const url = `${endpoint.baseUrl}${endpoint.path}`;
              console.log(`Testing with: ${cred.email} / ${cred.password}`);
              
              const response = await axios.post(
                url,
                cred,
                {
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                  }
                }
              );
              
              results.push({
                endpoint: url,
                credentials: cred,
                success: true,
                data: response.data,
                status: response.status
              });
              
              // If successful, break the loops
              return results;
            } catch (credError: any) {
              results.push({
                endpoint: `${endpoint.baseUrl}${endpoint.path}`,
                credentials: cred,
                success: false,
                error: credError.response?.data || credError.message,
                status: credError.response?.status
              });
            }
          }
        }
      }
    }
    
    console.log('Login Test Results:', JSON.stringify(results, null, 2));
    return results;
  }
    
    console.log('Login Test Results:', JSON.stringify(results, null, 2));
    return results;
  }
};

// Add test functions to authAPI for convenience
// TypeScript will ignore these at compile time but they'll be available at runtime
(authAPI as any).testLogin = testAPI.testLogin;
(authAPI as any).testRegister = testAPI.testRegister;

export default api;
